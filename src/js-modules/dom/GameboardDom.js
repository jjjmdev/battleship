import PubSub from "pubsub-js"
import { pubSubTokens } from "../pubSubTokens.js"
import { initDiv } from "../utils/domComponents.js"
import CellDom from "./CellDom.js"
import ShipDom from "./ShipDom.js"
import MissMarkDom from "./MissMarkDom.js"
import HitMarkDom from "./HitMarkDom.js"
import { getNestedElementByClass } from "../utils/domUtilities.js"

const blockName = "gameboard"
const aimingClass = "aiming"

const animationInitialStateClass = "initial-state"
const animationDuration = 200 // ms

// set the animation duration css property
document.documentElement.style.setProperty(
	"--time-animation",
	`${animationDuration}ms`
)

export default class GameboardDom {
	#gameboard
	#div
	#attackCallback
	#cells
	#fleetDom
	#deployedFleetDomShown
	#deployedFleetAnimationOn

	constructor(gameboard, canBeModified = false) {
		this.#gameboard = gameboard
		this.#cells = new Map()
		this.#div = this.#initGameboardDiv(gameboard)
		this.#div.obj = this

		this.#fleetDom = new Map()
		this.#initFleet()
		this.#deployedFleetDomShown = false
		this.#deployedFleetAnimationOn = false

		if (canBeModified) {
			this.#setEditCallbacks()
		}
	}

	// getters
	get gameboard() {
		return this.#gameboard
	}

	get div() {
		return this.#div
	}

	async showAttackOutcome(coords, outcome) {
		// the function is async, and awaits for the hit/miss mark show animation, if any
		const cellDom = this.#cells.get(coords.join(","))
		cellDom.setAttackStatus()

		const outcomeMarkDom = outcome.isHit
			? new HitMarkDom(coords)
			: new MissMarkDom(coords)
		this.#div.append(outcomeMarkDom.div)

		await triggerAnimation(outcomeMarkDom.div)

		if (outcome.isSunk) {
			const shipName = outcome.sunkShip.name
			const shipObj = this.#fleetDom.get(shipName)
			shipObj.makeItSunk()
			await this.#showShip(shipObj)
		}
		PubSub.publish(pubSubTokens.attackOutcomeShown, { coords, outcome })
	}

	enableAiming() {
		this.#div.classList.add(aimingClass)
		this.#attackCallback = this.#getAttackCoordsOnClickCallback.bind(this)
		this.#div.addEventListener("click", this.#attackCallback)
	}

	#createShipDom(shipName) {
		const shipObj = new ShipDom(
			shipName,
			...this.#gameboard.getShipPosition(shipName)
		)
		return shipObj
	}

	async #showShip(shipObj) {
		// the function is async, and awaits for the ship show animation, if any
		this.#div.append(shipObj.div)
		await triggerAnimation(shipObj.div)
	}

	async #hideShip(shipObj) {
		// the function is async, and awaits for the ship show animation, if any
		await triggerAnimation(shipObj.div, true)
		// wait for the animation end before removing it
		this.#div.removeChild(shipObj.div)
	}

	#initFleet() {
		// All fleets already have coordinates generated by randomShipsPlacement()
		this.#gameboard.fleet.forEach((shipName) => {
			const shipObj = this.#createShipDom(shipName)
			this.#fleetDom.set(shipName, shipObj)
		})
	}

	// the function is async, and awaits for all the ship show animations, if any
	async showDeployedFleet() {
		// do nothing if there is an animation ongoing or the fleet is already shown
		if (!this.#deployedFleetDomShown && !this.#deployedFleetAnimationOn) {
			this.#deployedFleetAnimationOn = true

			// save promises returned by #showShip to eventually wait for their resolution
			const promiseArray = []

			this.#gameboard.deployedFleet.forEach((shipName) => {
				const shipObj = this.#fleetDom.get(shipName)
				promiseArray.push(this.#showShip(shipObj)) // returns a promise
			})

			await Promise.all(promiseArray)

			this.#deployedFleetDomShown = true
			this.#deployedFleetAnimationOn = false
		}
	}

	// the function is async, and awaits for all the ship show animations, if any
	async hideDeployedFleet() {
		// do nothing if there is an animation ongoing or the fleet is already hidden
		if (this.#deployedFleetDomShown && !this.#deployedFleetAnimationOn) {
			this.#deployedFleetAnimationOn = true

			// save promises returned by #showShip to eventually wait for their resolution
			const promiseArray = []
			this.#gameboard.deployedFleet.forEach((shipName) => {
				const shipObj = this.#fleetDom.get(shipName)
				promiseArray.push(this.#hideShip(shipObj)) // returns a promise
			})

			await Promise.all(promiseArray)

			this.#deployedFleetDomShown = false
			this.#deployedFleetAnimationOn = false
		}
	}

	toggleDeployedFleet() {
		if (this.#deployedFleetDomShown) {
			this.hideDeployedFleet()
		} else {
			this.showDeployedFleet()
		}
	}

	async updateDeployedFleet() {
		await this.hideDeployedFleet()

		// change position of shipDom objects
		this.#gameboard.fleet.forEach((shipName) => {
			const shipObj = this.#fleetDom.get(shipName)
			shipObj.updatePosition(...this.#gameboard.getShipPosition(shipName))
		})

		await this.showDeployedFleet()
	}

	async updateDeployedShip(shipName) {
		const shipObj = this.#fleetDom.get(shipName)

		await this.#hideShip(shipObj)

		// change position of shipDom objects
		shipObj.updatePosition(...this.#gameboard.getShipPosition(shipName))

		await this.#showShip(shipObj)
	}

	#initGameboardDiv(gameboard) {
		const div = initDiv(blockName)

		// Forced grid appearance
		div.style.display = "grid"
		div.style.aspectRatio = `${gameboard.nCols}/${gameboard.nRows}`
		div.style.gridTemplateColumns = `repeat(${gameboard.nCols}, minmax(0, 1fr))`
		div.style.gridTemplateRows = `repeat(${gameboard.nRows}, minmax(0, 1fr))`

		const cells = gameboard.cells
		cells.forEach((column) => {
			column.forEach((cell) => {
				const cellDom = new CellDom(cell)
				this.#cells.set(cell.coords.join(","), cellDom)
				div.append(cellDom.div)
			})
		})

		return div
	}

	#getAttackCoordsOnClickCallback(e) {
		// We have subscribed to one event listener for the gameboard:
		// We need to retrieve the appropriate cell
		const point = [e.clientX, e.clientY]
		const cellDiv = getNestedElementByClass(point, "cell")

		if (cellDiv == null) {
			return
		}

		const cell = cellDiv.obj.cell
		if (!cell.hasBeenAttacked()) {
			// exit aiming mode
			this.#div.classList.remove(aimingClass)
			this.#div.removeEventListener("click", this.#attackCallback)
		}

		PubSub.publish(pubSubTokens.attackCoordsAcquired, cell.coords)
	}

	#setEditCallbacks() {
		// Disable touch-action property on each ship div to enable dragging on touch devices
		// see https://stackoverflow.com/questions/48124372/pointermove-event-not-working-with-touch-why-not
		this.#disableTouchActionOnFleet()

		// Disable dragStart events handling on each ship div
		// see https://javascript.info/mouse-drag-and-drop
		this.#disableDragStartOnFleet()

		// Set event listeners just to the gameboard div and use event delegation: you can still retrieve the correct ship/cell

		this.#div.addEventListener(
			"pointerdown",
			this.#startDragCallback.bind(this)
		)

		this.#div.addEventListener(
			"click",
			this.#rotateShipOnClickCallback.bind(this)
		)
	}

	#rotateShipOnClickCallback(e) {
		const point = [e.clientX, e.clientY]
		const cellDiv = getNestedElementByClass(point, "cell")

		if (cellDiv == null) {
			return
		}

		const cell = cellDiv.obj.cell
		if (!cell.hasShip()) {
			console.log("No ship to rotate here...")
			return
		}

		const shipName = cell.getShip().name
		const centerOfRotation = cell.coords
		console.log(`I'm rotating ship ${shipName} around [${centerOfRotation}]...`)

		this.#gameboard.rotateShip(shipName, centerOfRotation)
		this.updateDeployedShip(shipName)
	}

	#disableTouchActionOnFleet() {
		this.#gameboard.deployedFleet.forEach((shipName) => {
			const shipObj = this.#fleetDom.get(shipName)
			shipObj.div.style.touchAction = "none"
		})
	}

	#disableDragStartOnFleet() {
		this.#gameboard.deployedFleet.forEach((shipName) => {
			const shipObj = this.#fleetDom.get(shipName)
			shipObj.div.ondragstart = () => false
		})
	}

	#startDragCallback(e) {
		// based on: https://javascript.info/mouse-drag-and-drop
		// instead of absolutely positioning the dragging element, a transform translate() will be used
		e.preventDefault()

		// we have subscribed to one event listener for the gameboard: we need to retrieve the appropriate ship div
		const point = [e.clientX, e.clientY]
		const shipDiv = getNestedElementByClass(point, "ship")
		if (shipDiv == null) {
			return
		}

		// save the current transform property of the shipDiv: it will be modified while dragging
		const origShipDivTransform = shipDiv.style.transform

		// get current coordinates of pointer with respect to window (i.e. clientX, clientY)
		const origX = e.clientX
		const origY = e.clientY

		// define the onDrag and endDrag callbacks in here (use the variables defined on the startDrag callbacks)

		function onDragCallback(e) {
			// translate the ship to the current pointer coordinates updating the transform property of the shipDiv
			// remember to include the original transform value
			const currentX = e.clientX
			const currentY = e.clientY

			shipDiv.style.transform = `translate(${currentX - origX}px,${
				currentY - origY
			}px) ${origShipDivTransform}`
		}

		function endDragCallback() {
			// restore the original transform property
			shipDiv.style.transform = origShipDivTransform

			document.removeEventListener("pointermove", onDragCallback)
			document.removeEventListener("pointerup", endDragCallback)
		}

		document.addEventListener("pointermove", onDragCallback)
		document.addEventListener("pointerup", endDragCallback)
	}
}

async function triggerAnimation(div, hide = false) {
	// this uses a trick to trigger the animation on the element

	hide
		? div.classList.remove(animationInitialStateClass)
		: div.classList.add(animationInitialStateClass)

	await new Promise((resolve) => requestAnimationFrame(resolve))
	await new Promise((resolve) =>
		setTimeout(() => {
			div.classList.toggle(animationInitialStateClass)
			resolve()
		}, 0)
	)

	// wait for the animation to end before removing it
	return new Promise((resolve) => setTimeout(resolve, animationDuration))
}
